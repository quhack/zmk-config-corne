/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// Layers
#define QWERTY 0
#define NUM 1
#define SYMB 2
#define ADJUST 3

#define XXXXX &none
#define _____ &trans

// Behavior Overrides
&lt {
    tapping-term-ms = <200>;
    flavor = "hold-preferred";
};


/ {

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <NUM SYMB>;
            then-layer = <ADJUST>;
        };
    };


    behaviors {

      td_multi_windows: tap_dance_multi_windows {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MULTI_WINDOWS";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&kp ESC>, <&kp LGUI>;
      };

      bm: bottom_row_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "BOTTOM_ROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <135>;
        quick-tap-ms = <0>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
      };

      cm: code_row_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "CODE_ROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick-tap-ms = <0>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
        retro-tap;
      };

      sm: space_mod {
        compatible = "zmk,behavior-hold-tap";
        label = "SPACE_MOD";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <200>;
        quick-tap-ms = <125>;
        bindings = <&kp>, <&kp>;
      };
    };

        keymap {
                compatible = "zmk,keymap";

                qwerty {
// -----------------------------------------------------------------------------------------
// | - |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | - |
// | - |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  | - |
// | - |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | - |
//                    | ALT | CTRL | SPC |   | TAB | ENTR |wintap|
                        bindings = <
   XXXXX &kp Q       &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P          XXXXX
   XXXXX &kp A       &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI       XXXXX
   XXXXX &bm LSHFT Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &bm RSHFT FSLH XXXXX
        &kp LALT &kp LCTRL &lt NUM SPACE           &lt SYMB TAB &kp ENTER &td_multi_windows
                        >;
                };

                numbers {
// -----------------------------------------------------------------------------------------
// | - | ESC  |xxxxxx|xxxxxx|xxxxxx|BOOTLD|   |  7  |  8  |  9  |  0  | BSPC | - |
// | - |xxxxxx|xxxxxx|xxxxxx|xxxxxx|xxxxxx|   |  4  |  5  |  6  |  /  | DEL  | - |
// | - |xxxxxx|^^^^^^|xxxxxx|xxxxxx|xxxxxx|   |  1  |  2  |  3  |  .  |xxxxxx| - |
//                   |xxxxxx| ^^^^ | ^^^^ |   | ^^^^ |xxxxxx|xxxxxx|
                        bindings = <
   XXXXX &kp ESC XXXXX XXXXX XXXXX &bootloader   &kp KP_N7 &kp KP_N8 &kp KP_N9 &kp KP_N0    &kp BSPC XXXXX
   XXXXX  XXXXX  XXXXX XXXXX XXXXX XXXXX         &kp KP_N4 &kp KP_N5 &kp KP_N6 &kp KP_SLASH &kp DEL  XXXXX
   XXXXX  _____  XXXXX XXXXX XXXXX XXXXX         &kp KP_N1 &kp KP_N2 &kp KP_N3 &kp KP_DOT   XXXXX    XXXXX
                          XXXXX  _____  _____    _____     XXXXX     XXXXX
                        >;
                };

                symbols {
// -----------------------------------------------------------------------------------------
// | - |  !  |  "  |  Â£  |  $  |  %  |   |  ^  |  &  |  *  |  -  |  =  | - |
// | - |     |  |  |  {  |  [  |  (  |   |  )  |  ]  |  }  |  \  |  #  | - |
// | - |  ~  |  `  |xxxxx|xxxxx|xxxxx|   |xxxxx|xxxxx|  _  |  +  |xxxxx| - |
//                 |xxxxx|^^^^^|^^^^^|   |^^^^^|xxxxx|xxxxx|
                        bindings = <
   XXXXX  &kp EXCL  &kp DQT   &kp LS(3)  &kp DLLR   &kp PRCNT   &kp CARET &kp AMPS  &kp ASTRK      &kp MINUS &kp EQUAL XXXXX
   XXXXX  XXXXX     &kp PIPE  &kp LBRC   &kp LBKT   &kp LPAR    &kp RPAR  &kp RBKT  &kp RBRC       &kp NUBS  &kp NUHS  XXXXX
   XXXXX  &kp TILDE &kp GRAVE XXXXX      XXXXX      XXXXX       XXXXX     XXXXX     &kp UNDERSCORE &kp PLUS  XXXXX     XXXXX
                                      XXXXX _____   _____       _____   XXXXX    XXXXX
                        >;
                };
                adjusts {
// -----------------------------------------------------------------------------------------
// | - | F12 | F7  | F8  | F9  |  *  |   | BT0 | BT1 | BT2 |xxxxx|BTCLR| - |
// | - | F11 | F4  | F5  | F6  |VOL_U|   | LEFT| DOWN|  UP |RIGHT|xxxxx| - |
// | - | F10 | F1  | F2  | F3  |VOL_D|   |xxxxx|xxxxx|xxxxx|xxxxx|xxxxx| - |
//                |xxxxx|^^^^^|^^^^^^|   |^^^^^|xxxxx|xxxxx|
                        bindings = <
   XXXXX  &kp F12       &kp F7 &kp F8 &kp F9 &kp KP_ASTERISK   &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 XXXXX     &bt BT_CLR XXXXX
   XXXXX  &kp F11       &kp F4 &kp F5 &kp F6 &kp C_VOL_UP      &kp LEFT     &kp DOWN     &kp UP       &kp RIGHT XXXXX      XXXXX
   XXXXX  &bm LSHFT F10 &kp F1 &kp F2 &kp F3 &kp C_VOL_DN     XXXXX XXXXX XXXXX XXXXX XXXXX XXXXX
                             XXXXX _____   _____   _____   XXXXX XXXXX
                        >;
                };
        };
};
